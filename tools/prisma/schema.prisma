generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String
  picture          String?
  username         String          @unique
  email            String          @unique
  locale           String          @default("en-US")
  emailVerified    Boolean         @default(false)
  twoFactorEnabled Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  provider         Provider
  awards           Award[]
  basics           Basics?
  certifications   Certification[]
  customSections   CustomSection[]
  educations       Education[]
  experiences      Experience[]
  interests        Interest[]
  languages        Language[]
  profiles         Profile[]
  projects         Project[]
  publications     Publication[]
  references       Reference[]
  resumes          Resume[]
  secrets          Secrets?
  skills           Skill[]
  summary          Summary?
  volunteer        Volunteer[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  statistics Statistics?

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index([userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([resumeId, id])
}

model Basics {
  id           String  @id @default(cuid())
  name         String
  image        String?
  email        String?
  phone        String?
  url          String?
  summary      String?
  location     String?
  userId       String  @unique
  customFields Json?
  headline     String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Summary {
  id      String @id @default(cuid())
  content String
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id       String  @id @default(cuid())
  network  String
  username String
  url      String
  icon     String?
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id        String    @id @default(cuid())
  company   String
  position  String
  startDate DateTime
  endDate   DateTime?
  summary   String?
  userId    String
  website   String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String    @id @default(cuid())
  institution String
  area        String
  studyType   String?
  startDate   DateTime
  endDate     DateTime?
  gpa         Float?
  userId      String
  website     String?
  summary     String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String?
  keywords    String[] @default([])
  userId      String
  level       Int?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Language {
  id          String  @id @default(cuid())
  name        String
  description String?
  userId      String
  level       Int?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Award {
  id      String    @id @default(cuid())
  title   String
  date    DateTime?
  awarder String?
  summary String?
  userId  String
  website String?
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certification {
  id      String    @id @default(cuid())
  name    String
  date    DateTime?
  issuer  String
  summary String?
  website String?
  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interest {
  id       String   @id @default(cuid())
  name     String
  keywords String[] @default([])
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  keywords    String[]  @default([])
  summary     String?
  website     String?
  startDate   DateTime?
  endDate     DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Publication {
  id          String    @id @default(cuid())
  name        String
  publisher   String
  date        DateTime?
  url         String?
  summary     String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Volunteer {
  id           String    @id @default(cuid())
  organization String
  position     String
  startDate    DateTime?
  endDate      DateTime?
  summary      String?
  highlights   String[]  @default([])
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reference {
  id          String  @id @default(cuid())
  name        String
  reference   String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomSection {
  id          String  @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Provider {
  email
  github
  google
  openid
}

enum Visibility {
  public
  private
}
